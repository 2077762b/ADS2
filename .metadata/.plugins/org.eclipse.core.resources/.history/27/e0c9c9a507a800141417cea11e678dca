import java.util.*;
import java.io.*;
public class ArrayQueue<E> {

    public static final int CAPACITY = 10;  // default queue capacity
    private E[] Q;                          // E array used to implement the queue  
    private int n;                          // actual capacity of queue
    private int front;                      // index for the top of queue
    private int rear;                       // rear of the queue
    private int size;                       // size of the queue
    
	
    public ArrayQueue(){this(CAPACITY);}

    @SuppressWarnings("unchecked")
    public ArrayQueue(int capacity){
	n = capacity;
	Q = (E[]) new Object [n]; 
	front = rear = size = 0;
    }
    //
    // NOTE: java does not allow creation of array with parametrised type!
    //
	
	/**
	@return integer size of the array
	*/
    public int size(){return size;}
    
	/**
	@return boolean true if the array is empty otherwise false
	*/
    public boolean isEmpty(){return size==0;}

	/**
	@return generic type object that is at the front of the queue
	@throws ArrayQueueException if the queue is empty
	*/
    public E front() throws ArrayQueueException {
		if (size==0) throw new ArrayQueueException();
		return Q[front];
	}
    
	/**
	@param generic type object to be added to the queue
	 * @throws Exception 
	*/
    public void enqueue(E element) throws ArrayQueueException {
		if (size==n) throw new ArrayQueueException();
		if (isEmpty()) {
			Q[0] = element;			
		} else {
			rear = (rear+1)%n;
			Q[rear] = element;
		}
		size++;
		System.out.println("front"+ front);
		System.out.println("rear" + rear);
	}
     
    public E dequeue() throws ArrayQueueException{
		if (size==0) throw new ArrayQueueException();
		E item = Q[front];
		front = (front+1)%n;
		size--;
		System.out.println("front"+ front);
		System.out.println("rear" + rear);
		return item;
    }
		
    public String toString(){
    	String s = "[";
    	for (int i=front;i!=rear+1;i=(i+1)%n) {
    		if (Q[i]!=null) s=s+Q[i];
    		if (i!=rear) s = s+",";
    	}
    	return s +"]";
    	      
    }
    //
    // IMPLEMENT ME
    //
    //
    // NOTE: if the queue contains 1,2,3 then return "[1,2,3]"
    //       if the queue contains 1 then return "[1]"
    //       if the queue is empty return "[]"
    //
}
	
